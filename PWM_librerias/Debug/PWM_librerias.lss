
PWM_librerias.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000007f2  00000886  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000888  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009fa  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ff  00000000  00000000  00001352  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e2  00000000  00000000  00001a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000458  00000000  00000000  00001ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025e  00000000  00000000  00002454  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000026b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0b 02 	call	0x416	; 0x416 <main>
  9e:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_PWM1A>:
#include "PWM1.h"

void init_PWM1A(int orientacion,int modo, int preescaler,uint16_t frecuency ){
  a6:	f9 01       	movw	r30, r18
	//Definimos el puerto de salida
	DDRB |= (1<<PINB1);
  a8:	34 b1       	in	r19, 0x04	; 4
  aa:	32 60       	ori	r19, 0x02	; 2
  ac:	34 b9       	out	0x04, r19	; 4
	TCCR1A=0;
  ae:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B=0;
  b2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	//Definimos la orientación
	if (orientacion==0){
  b6:	89 2b       	or	r24, r25
  b8:	31 f4       	brne	.+12     	; 0xc6 <init_PWM1A+0x20>
		//No invertido
		TCCR1A |= (1<<COM1A1);
  ba:	a0 e8       	ldi	r26, 0x80	; 128
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	8c 91       	ld	r24, X
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	8c 93       	st	X, r24
  c4:	05 c0       	rjmp	.+10     	; 0xd0 <init_PWM1A+0x2a>
		}else{
		//invertido
		TCCR1A |= (1<<COM1A1) | (1<<COM1A0);
  c6:	a0 e8       	ldi	r26, 0x80	; 128
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	8c 91       	ld	r24, X
  cc:	80 6c       	ori	r24, 0xC0	; 192
  ce:	8c 93       	st	X, r24
	}
	
	//Definimos modo de operación FAST O PhaseCorrect
	if (modo==0){
  d0:	61 15       	cp	r22, r1
  d2:	71 05       	cpc	r23, r1
  d4:	59 f4       	brne	.+22     	; 0xec <init_PWM1A+0x46>
		//FAST con 8 bits
		TCCR1A |= (1<<WGM10);
  d6:	a0 e8       	ldi	r26, 0x80	; 128
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	8c 91       	ld	r24, X
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	8c 93       	st	X, r24
		TCCR1B |= (1<<WGM12);
  e0:	a1 e8       	ldi	r26, 0x81	; 129
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	8c 91       	ld	r24, X
  e6:	88 60       	ori	r24, 0x08	; 8
  e8:	8c 93       	st	X, r24
  ea:	52 c0       	rjmp	.+164    	; 0x190 <init_PWM1A+0xea>
		}else if(modo==1){
  ec:	61 30       	cpi	r22, 0x01	; 1
  ee:	71 05       	cpc	r23, r1
  f0:	59 f4       	brne	.+22     	; 0x108 <init_PWM1A+0x62>
		//Fast con 9 bits
		TCCR1A |= (1<<WGM11);
  f2:	a0 e8       	ldi	r26, 0x80	; 128
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	8c 91       	ld	r24, X
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	8c 93       	st	X, r24
		TCCR1B |= (1<<WGM12);
  fc:	a1 e8       	ldi	r26, 0x81	; 129
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	8c 91       	ld	r24, X
 102:	88 60       	ori	r24, 0x08	; 8
 104:	8c 93       	st	X, r24
 106:	44 c0       	rjmp	.+136    	; 0x190 <init_PWM1A+0xea>
		}else if(modo==2){
 108:	62 30       	cpi	r22, 0x02	; 2
 10a:	71 05       	cpc	r23, r1
 10c:	59 f4       	brne	.+22     	; 0x124 <init_PWM1A+0x7e>
		//FAST con 10 bits
		TCCR1A |= (1<<WGM11)|(1<<WGM10);
 10e:	a0 e8       	ldi	r26, 0x80	; 128
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	8c 91       	ld	r24, X
 114:	83 60       	ori	r24, 0x03	; 3
 116:	8c 93       	st	X, r24
		TCCR1B |= (1<<WGM12);
 118:	a1 e8       	ldi	r26, 0x81	; 129
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	8c 91       	ld	r24, X
 11e:	88 60       	ori	r24, 0x08	; 8
 120:	8c 93       	st	X, r24
 122:	36 c0       	rjmp	.+108    	; 0x190 <init_PWM1A+0xea>
		}else if(modo==3){
 124:	63 30       	cpi	r22, 0x03	; 3
 126:	71 05       	cpc	r23, r1
 128:	31 f4       	brne	.+12     	; 0x136 <init_PWM1A+0x90>
		//PhaseCorrect con 8 bits
		TCCR1A |= (1<<WGM10);
 12a:	a0 e8       	ldi	r26, 0x80	; 128
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	8c 91       	ld	r24, X
 130:	81 60       	ori	r24, 0x01	; 1
 132:	8c 93       	st	X, r24
 134:	2d c0       	rjmp	.+90     	; 0x190 <init_PWM1A+0xea>
		}else if(modo==4){
 136:	64 30       	cpi	r22, 0x04	; 4
 138:	71 05       	cpc	r23, r1
 13a:	31 f4       	brne	.+12     	; 0x148 <init_PWM1A+0xa2>
		//PhaseCorrect con 9 bits
		TCCR1A |= (1<<WGM11);
 13c:	a0 e8       	ldi	r26, 0x80	; 128
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	8c 91       	ld	r24, X
 142:	82 60       	ori	r24, 0x02	; 2
 144:	8c 93       	st	X, r24
 146:	24 c0       	rjmp	.+72     	; 0x190 <init_PWM1A+0xea>
		}else if(modo==5){
 148:	65 30       	cpi	r22, 0x05	; 5
 14a:	71 05       	cpc	r23, r1
 14c:	31 f4       	brne	.+12     	; 0x15a <init_PWM1A+0xb4>
		//PhaseCorrect con 10 bits
		TCCR1A |= (1<<WGM11)|(1<<WGM10);
 14e:	a0 e8       	ldi	r26, 0x80	; 128
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	8c 91       	ld	r24, X
 154:	83 60       	ori	r24, 0x03	; 3
 156:	8c 93       	st	X, r24
 158:	1b c0       	rjmp	.+54     	; 0x190 <init_PWM1A+0xea>
		}else if (modo==6){
 15a:	66 30       	cpi	r22, 0x06	; 6
 15c:	71 05       	cpc	r23, r1
 15e:	59 f4       	brne	.+22     	; 0x176 <init_PWM1A+0xd0>
		//FAST con ICR1 TOP
		TCCR1A |= (1<<WGM11);
 160:	a0 e8       	ldi	r26, 0x80	; 128
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	8c 91       	ld	r24, X
 166:	82 60       	ori	r24, 0x02	; 2
 168:	8c 93       	st	X, r24
		TCCR1B |= (1<<WGM12)|(1<<WGM13);
 16a:	a1 e8       	ldi	r26, 0x81	; 129
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	8c 91       	ld	r24, X
 170:	88 61       	ori	r24, 0x18	; 24
 172:	8c 93       	st	X, r24
 174:	0d c0       	rjmp	.+26     	; 0x190 <init_PWM1A+0xea>
		}else if (modo==7){
 176:	67 30       	cpi	r22, 0x07	; 7
 178:	71 05       	cpc	r23, r1
 17a:	51 f4       	brne	.+20     	; 0x190 <init_PWM1A+0xea>
		//PhaseCorrect con ICR1 TOP
		TCCR1A |= (1<<WGM11);
 17c:	a0 e8       	ldi	r26, 0x80	; 128
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	8c 91       	ld	r24, X
 182:	82 60       	ori	r24, 0x02	; 2
 184:	8c 93       	st	X, r24
		TCCR1B |= (1<<WGM13);
 186:	a1 e8       	ldi	r26, 0x81	; 129
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	8c 91       	ld	r24, X
 18c:	80 61       	ori	r24, 0x10	; 16
 18e:	8c 93       	st	X, r24
	}
	
	//Definimos el preescaler
	switch(preescaler){
 190:	40 34       	cpi	r20, 0x40	; 64
 192:	51 05       	cpc	r21, r1
 194:	e1 f0       	breq	.+56     	; 0x1ce <init_PWM1A+0x128>
 196:	3c f4       	brge	.+14     	; 0x1a6 <init_PWM1A+0x100>
 198:	41 15       	cp	r20, r1
 19a:	51 05       	cpc	r21, r1
 19c:	61 f0       	breq	.+24     	; 0x1b6 <init_PWM1A+0x110>
 19e:	48 30       	cpi	r20, 0x08	; 8
 1a0:	51 05       	cpc	r21, r1
 1a2:	79 f0       	breq	.+30     	; 0x1c2 <init_PWM1A+0x11c>
 1a4:	25 c0       	rjmp	.+74     	; 0x1f0 <init_PWM1A+0x14a>
 1a6:	41 15       	cp	r20, r1
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	58 07       	cpc	r21, r24
 1ac:	b1 f0       	breq	.+44     	; 0x1da <init_PWM1A+0x134>
 1ae:	41 15       	cp	r20, r1
 1b0:	54 40       	sbci	r21, 0x04	; 4
 1b2:	c9 f0       	breq	.+50     	; 0x1e6 <init_PWM1A+0x140>
 1b4:	1d c0       	rjmp	.+58     	; 0x1f0 <init_PWM1A+0x14a>
		case 0:
		TCCR1B |= (1<<CS10);
 1b6:	a1 e8       	ldi	r26, 0x81	; 129
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	8c 91       	ld	r24, X
 1bc:	81 60       	ori	r24, 0x01	; 1
 1be:	8c 93       	st	X, r24
		break;
 1c0:	17 c0       	rjmp	.+46     	; 0x1f0 <init_PWM1A+0x14a>
		case 8:
		TCCR1B |= (1<<CS11);
 1c2:	a1 e8       	ldi	r26, 0x81	; 129
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	8c 91       	ld	r24, X
 1c8:	82 60       	ori	r24, 0x02	; 2
 1ca:	8c 93       	st	X, r24
		break;
 1cc:	11 c0       	rjmp	.+34     	; 0x1f0 <init_PWM1A+0x14a>
		case 64:
		TCCR1B |= (1<<CS11)|(1<<CS10);
 1ce:	a1 e8       	ldi	r26, 0x81	; 129
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	8c 91       	ld	r24, X
 1d4:	83 60       	ori	r24, 0x03	; 3
 1d6:	8c 93       	st	X, r24
		break;
 1d8:	0b c0       	rjmp	.+22     	; 0x1f0 <init_PWM1A+0x14a>
		case 256:
		TCCR1B |= (1<<CS12);
 1da:	a1 e8       	ldi	r26, 0x81	; 129
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
 1de:	8c 91       	ld	r24, X
 1e0:	84 60       	ori	r24, 0x04	; 4
 1e2:	8c 93       	st	X, r24
		break;
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <init_PWM1A+0x14a>
		case 1024:
		TCCR1B |= (1<<CS12)|(1<<CS10);
 1e6:	a1 e8       	ldi	r26, 0x81	; 129
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	8c 91       	ld	r24, X
 1ec:	85 60       	ori	r24, 0x05	; 5
 1ee:	8c 93       	st	X, r24
		break;
	}
	//Definimos la frecuencia (unicamente funciona en modo donde el top es ICR1)
	//Fpwm=(fosc)/(preescaler*(1+TOP)
	ICR1 = frecuency;
 1f0:	f0 93 87 00 	sts	0x0087, r31	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1f4:	e0 93 86 00 	sts	0x0086, r30	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 1f8:	08 95       	ret

000001fa <init_PWM1B>:
}

void init_PWM1B(int orientacion){
	DDRB |= (1<<PINB2);
 1fa:	24 b1       	in	r18, 0x04	; 4
 1fc:	24 60       	ori	r18, 0x04	; 4
 1fe:	24 b9       	out	0x04, r18	; 4
	//Definimos la orientación
	if (orientacion==0){
 200:	89 2b       	or	r24, r25
 202:	31 f4       	brne	.+12     	; 0x210 <init_PWM1B+0x16>
		//No invertido
		TCCR1A |= (1<<COM1B1);
 204:	e0 e8       	ldi	r30, 0x80	; 128
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	80 62       	ori	r24, 0x20	; 32
 20c:	80 83       	st	Z, r24
 20e:	08 95       	ret
		}else{
		//invertido
		TCCR1A |= (1<<COM1B1) | (1<<COM1B0);
 210:	e0 e8       	ldi	r30, 0x80	; 128
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	80 63       	ori	r24, 0x30	; 48
 218:	80 83       	st	Z, r24
 21a:	08 95       	ret

0000021c <duty_cycle1A>:
	
	
}

void duty_cycle1A(uint16_t duty){
	OCR1A = duty;
 21c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 220:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 224:	08 95       	ret

00000226 <duty_cycle1B>:
}

void duty_cycle1B(uint16_t duty){
	OCR1B = duty;
 226:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 22a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 22e:	08 95       	ret

00000230 <init_ADC>:
 *  Author: angel
 */ 
#include "ADC.h"

void init_ADC(int referencia,int justificacion,int preescaler){
	ADMUX=0;
 230:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA=0;
 234:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	//Definimos la referencia que va a tener el ADC
	if (referencia==0){
 238:	00 97       	sbiw	r24, 0x00	; 0
 23a:	31 f4       	brne	.+12     	; 0x248 <init_ADC+0x18>
			//Voltaje de referencia interna de 5V.
			ADMUX |= (1<<REFS0);
 23c:	ec e7       	ldi	r30, 0x7C	; 124
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	80 64       	ori	r24, 0x40	; 64
 244:	80 83       	st	Z, r24
 246:	07 c0       	rjmp	.+14     	; 0x256 <init_ADC+0x26>
	} else if (referencia==1){
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	29 f4       	brne	.+10     	; 0x256 <init_ADC+0x26>
		//Voltaje de referencia interna de 1.1V.
		ADMUX |= (1<<REFS0)|(1<<REFS1);
 24c:	ec e7       	ldi	r30, 0x7C	; 124
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	80 6c       	ori	r24, 0xC0	; 192
 254:	80 83       	st	Z, r24
	}
	
	//Escogemos la justificación (IZQUIERDA O DERECHA)
	if (justificacion==0){
 256:	61 15       	cp	r22, r1
 258:	71 05       	cpc	r23, r1
 25a:	31 f4       	brne	.+12     	; 0x268 <init_ADC+0x38>
		//Justificación izquierda
		ADMUX |= (1<<ADLAR);
 25c:	ec e7       	ldi	r30, 0x7C	; 124
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	80 62       	ori	r24, 0x20	; 32
 264:	80 83       	st	Z, r24
 266:	08 c0       	rjmp	.+16     	; 0x278 <init_ADC+0x48>
	} else if (justificacion==1){
 268:	61 30       	cpi	r22, 0x01	; 1
 26a:	71 05       	cpc	r23, r1
 26c:	29 f4       	brne	.+10     	; 0x278 <init_ADC+0x48>
		//Justificación derecha
		ADMUX &= ~(1<<ADLAR);
 26e:	ec e7       	ldi	r30, 0x7C	; 124
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	8f 7d       	andi	r24, 0xDF	; 223
 276:	80 83       	st	Z, r24
	}
	
	//Escogemos el preescaler
	if (preescaler==2){
 278:	42 30       	cpi	r20, 0x02	; 2
 27a:	51 05       	cpc	r21, r1
 27c:	31 f4       	brne	.+12     	; 0x28a <init_ADC+0x5a>
			//Preescaler 2 -> frecuencia del adc = Foscilador/2
			ADCSRA |= (1<<ADPS0);
 27e:	ea e7       	ldi	r30, 0x7A	; 122
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	81 60       	ori	r24, 0x01	; 1
 286:	80 83       	st	Z, r24
 288:	35 c0       	rjmp	.+106    	; 0x2f4 <init_ADC+0xc4>
	} else if (preescaler==4){
 28a:	44 30       	cpi	r20, 0x04	; 4
 28c:	51 05       	cpc	r21, r1
 28e:	31 f4       	brne	.+12     	; 0x29c <init_ADC+0x6c>
		//Preescaler 2 -> frecuencia del adc = Foscilador/2
		ADCSRA |=(1<<ADPS1);
 290:	ea e7       	ldi	r30, 0x7A	; 122
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	82 60       	ori	r24, 0x02	; 2
 298:	80 83       	st	Z, r24
 29a:	2c c0       	rjmp	.+88     	; 0x2f4 <init_ADC+0xc4>
	}else if (preescaler==8){
 29c:	48 30       	cpi	r20, 0x08	; 8
 29e:	51 05       	cpc	r21, r1
 2a0:	31 f4       	brne	.+12     	; 0x2ae <init_ADC+0x7e>
		//Preescaler 2 -> frecuencia del adc = Foscilador/8
		ADCSRA |=(1<<ADPS1) | (1<<ADPS0);
 2a2:	ea e7       	ldi	r30, 0x7A	; 122
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	83 60       	ori	r24, 0x03	; 3
 2aa:	80 83       	st	Z, r24
 2ac:	23 c0       	rjmp	.+70     	; 0x2f4 <init_ADC+0xc4>
	}else if (preescaler==16){
 2ae:	40 31       	cpi	r20, 0x10	; 16
 2b0:	51 05       	cpc	r21, r1
 2b2:	31 f4       	brne	.+12     	; 0x2c0 <init_ADC+0x90>
		//Preescaler 2 -> frecuencia del adc = Foscilador/16
		ADCSRA |= (1<<ADPS2);
 2b4:	ea e7       	ldi	r30, 0x7A	; 122
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	84 60       	ori	r24, 0x04	; 4
 2bc:	80 83       	st	Z, r24
 2be:	1a c0       	rjmp	.+52     	; 0x2f4 <init_ADC+0xc4>
	}else if (preescaler==32){
 2c0:	40 32       	cpi	r20, 0x20	; 32
 2c2:	51 05       	cpc	r21, r1
 2c4:	31 f4       	brne	.+12     	; 0x2d2 <init_ADC+0xa2>
		//Preescaler 2 -> frecuencia del adc = Foscilador/32
		ADCSRA |= (1<<ADPS2)|(1<<ADPS0);
 2c6:	ea e7       	ldi	r30, 0x7A	; 122
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	85 60       	ori	r24, 0x05	; 5
 2ce:	80 83       	st	Z, r24
 2d0:	11 c0       	rjmp	.+34     	; 0x2f4 <init_ADC+0xc4>
	}else if (preescaler==64){
 2d2:	40 34       	cpi	r20, 0x40	; 64
 2d4:	51 05       	cpc	r21, r1
 2d6:	31 f4       	brne	.+12     	; 0x2e4 <init_ADC+0xb4>
		//Preescaler 2 -> frecuencia del adc = Foscilador/64
		ADCSRA |= (1<<ADPS2) | (1<<ADPS1);
 2d8:	ea e7       	ldi	r30, 0x7A	; 122
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	86 60       	ori	r24, 0x06	; 6
 2e0:	80 83       	st	Z, r24
 2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <init_ADC+0xc4>
	} else if (preescaler==128){
 2e4:	40 38       	cpi	r20, 0x80	; 128
 2e6:	51 05       	cpc	r21, r1
 2e8:	29 f4       	brne	.+10     	; 0x2f4 <init_ADC+0xc4>
		//Preescaler 2 -> frecuencia del adc = Foscilador/128
		ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 2ea:	ea e7       	ldi	r30, 0x7A	; 122
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	87 60       	ori	r24, 0x07	; 7
 2f2:	80 83       	st	Z, r24
	}
	
	//Habilitando la interrupción del ADC
	ADCSRA |= (1<<ADIE);
 2f4:	ea e7       	ldi	r30, 0x7A	; 122
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	88 60       	ori	r24, 0x08	; 8
 2fc:	80 83       	st	Z, r24
	
	//Enciendo el ADC
	ADCSRA |= (1 << ADEN);
 2fe:	80 81       	ld	r24, Z
 300:	80 68       	ori	r24, 0x80	; 128
 302:	80 83       	st	Z, r24
 304:	08 95       	ret

00000306 <readADC>:

}

uint8_t readADC(int canal){
 306:	9c 01       	movw	r18, r24
	//Borramos el MUX DEL ADC
	ADMUX &= ~(1<<MUX3)& ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
 308:	ec e7       	ldi	r30, 0x7C	; 124
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	90 81       	ld	r25, Z
 30e:	90 7f       	andi	r25, 0xF0	; 240
 310:	90 83       	st	Z, r25
	
	//Encendemos el puerto deseado
	if (canal==0){
 312:	21 15       	cp	r18, r1
 314:	31 05       	cpc	r19, r1
 316:	21 f4       	brne	.+8      	; 0x320 <readADC+0x1a>
		//Seleccionar puerto (ADC0 - A0)
		ADMUX &= ~(1<<MUX3)& ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
 318:	80 81       	ld	r24, Z
 31a:	80 7f       	andi	r24, 0xF0	; 240
 31c:	80 83       	st	Z, r24
 31e:	35 c0       	rjmp	.+106    	; 0x38a <readADC+0x84>
	}else if (canal==1){
 320:	21 30       	cpi	r18, 0x01	; 1
 322:	31 05       	cpc	r19, r1
 324:	31 f4       	brne	.+12     	; 0x332 <readADC+0x2c>
		// Seleccionar puerto (ADC1 - A1)
		ADMUX |= (1<<MUX0);
 326:	ec e7       	ldi	r30, 0x7C	; 124
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	81 60       	ori	r24, 0x01	; 1
 32e:	80 83       	st	Z, r24
 330:	2c c0       	rjmp	.+88     	; 0x38a <readADC+0x84>
	}else if (canal==2){
 332:	22 30       	cpi	r18, 0x02	; 2
 334:	31 05       	cpc	r19, r1
 336:	31 f4       	brne	.+12     	; 0x344 <readADC+0x3e>
		// Seleccionar puerto (ADC2 - A2)
		ADMUX |= (1<<MUX1);
 338:	ec e7       	ldi	r30, 0x7C	; 124
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	82 60       	ori	r24, 0x02	; 2
 340:	80 83       	st	Z, r24
 342:	23 c0       	rjmp	.+70     	; 0x38a <readADC+0x84>
	}else if (canal==3){
 344:	23 30       	cpi	r18, 0x03	; 3
 346:	31 05       	cpc	r19, r1
 348:	31 f4       	brne	.+12     	; 0x356 <readADC+0x50>
		// Seleccionar puerto (ADC3 - A3)
		ADMUX |= (1<<MUX1)|(1<<MUX0);
 34a:	ec e7       	ldi	r30, 0x7C	; 124
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	83 60       	ori	r24, 0x03	; 3
 352:	80 83       	st	Z, r24
 354:	1a c0       	rjmp	.+52     	; 0x38a <readADC+0x84>
	}else if (canal==4){
 356:	24 30       	cpi	r18, 0x04	; 4
 358:	31 05       	cpc	r19, r1
 35a:	31 f4       	brne	.+12     	; 0x368 <readADC+0x62>
		//Seleccionar puerto (ADC4 - A4)
		ADMUX |= (1<<MUX2);
 35c:	ec e7       	ldi	r30, 0x7C	; 124
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	84 60       	ori	r24, 0x04	; 4
 364:	80 83       	st	Z, r24
 366:	11 c0       	rjmp	.+34     	; 0x38a <readADC+0x84>
	} else if (canal==5){
 368:	25 30       	cpi	r18, 0x05	; 5
 36a:	31 05       	cpc	r19, r1
 36c:	31 f4       	brne	.+12     	; 0x37a <readADC+0x74>
		//Seleccionar puerto (ADC5 - A5)
		ADMUX |= (1<<MUX2)|(1<<MUX0);
 36e:	ec e7       	ldi	r30, 0x7C	; 124
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	85 60       	ori	r24, 0x05	; 5
 376:	80 83       	st	Z, r24
 378:	08 c0       	rjmp	.+16     	; 0x38a <readADC+0x84>
	} else if (canal==6){
 37a:	26 30       	cpi	r18, 0x06	; 6
 37c:	31 05       	cpc	r19, r1
 37e:	29 f4       	brne	.+10     	; 0x38a <readADC+0x84>
		//Seleccionar puerto (ADC6 - A6)
		ADMUX |= (1<<MUX2)|(1<<MUX1);
 380:	ec e7       	ldi	r30, 0x7C	; 124
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	86 60       	ori	r24, 0x06	; 6
 388:	80 83       	st	Z, r24
	}
	
	//INICIAMOS LECTURA
	ADCSRA |= (1 << ADSC);
 38a:	ea e7       	ldi	r30, 0x7A	; 122
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	80 64       	ori	r24, 0x40	; 64
 392:	80 83       	st	Z, r24
	
	while (ADCSRA & (1 << ADSC)) {
 394:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 398:	86 fd       	sbrc	r24, 6
 39a:	fc cf       	rjmp	.-8      	; 0x394 <readADC+0x8e>
		// Esperar
	}
	uint8_t valorADC_H = ADCH;
 39c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	return valorADC_H;
 3a0:	08 95       	ret

000003a2 <init_pines>:
volatile uint8_t PuertoADC=4;
volatile uint16_t destino=0;

void init_pines(void){
	// Configurar los pines PC4, PC5 y PC6 como entradas y habilitar resistencias de pull-up
	DDRC &= ~(1 << DDC4) & ~(1 << DDC5) & ~(1 << DDC6);
 3a2:	87 b1       	in	r24, 0x07	; 7
 3a4:	8f 78       	andi	r24, 0x8F	; 143
 3a6:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC4) | (1 << PORTC5)| (1 << PORTC6);
 3a8:	88 b1       	in	r24, 0x08	; 8
 3aa:	80 67       	ori	r24, 0x70	; 112
 3ac:	88 b9       	out	0x08, r24	; 8
 3ae:	08 95       	ret

000003b0 <reescalar>:

}

uint16_t reescalar(uint8_t valor, uint8_t max_origen, uint16_t max_destino) {
 3b0:	cf 92       	push	r12
 3b2:	df 92       	push	r13
 3b4:	ef 92       	push	r14
 3b6:	ff 92       	push	r15
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	16 2f       	mov	r17, r22
 3c0:	ea 01       	movw	r28, r20
	// Convertir el valor al rango 0 - max_origen
	float valor_normalizado = (float)valor / max_origen;
 3c2:	68 2f       	mov	r22, r24
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__floatunsisf>
 3ce:	6b 01       	movw	r12, r22
 3d0:	7c 01       	movw	r14, r24
 3d2:	61 2f       	mov	r22, r17
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__floatsisf>
 3de:	9b 01       	movw	r18, r22
 3e0:	ac 01       	movw	r20, r24
 3e2:	c7 01       	movw	r24, r14
 3e4:	b6 01       	movw	r22, r12
 3e6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__divsf3>
 3ea:	6b 01       	movw	r12, r22
 3ec:	7c 01       	movw	r14, r24

	// Escalar el valor al rango 0 - max_destino
	uint16_t valor_reescalado = valor_normalizado * max_destino;
 3ee:	be 01       	movw	r22, r28
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__floatunsisf>
 3f8:	a7 01       	movw	r20, r14
 3fa:	96 01       	movw	r18, r12
 3fc:	0e 94 8a 03 	call	0x714	; 0x714 <__mulsf3>
 400:	0e 94 cd 02 	call	0x59a	; 0x59a <__fixunssfsi>

	return valor_reescalado;
}
 404:	cb 01       	movw	r24, r22
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	df 90       	pop	r13
 412:	cf 90       	pop	r12
 414:	08 95       	ret

00000416 <main>:

int main() {
	init_pines();
 416:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <init_pines>
	//frecuencia del adc -> 16M/128 = 125kHz
	init_ADC(0,0,128);
 41a:	40 e8       	ldi	r20, 0x80	; 128
 41c:	50 e0       	ldi	r21, 0x00	; 0
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 18 01 	call	0x230	; 0x230 <init_ADC>
	// Si preescaler=256
	//Fpwm=(fosc)/(preescaler*(1+TOP))
	//50 Hz = 16,000,000 Hz/(1024 * (1*1249))
	//ICR1=1249
	
	destino=312;
 42a:	88 e3       	ldi	r24, 0x38	; 56
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 432:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	int preescaler=1024;
	
	init_PWM1A(0,6,preescaler,destino);
 436:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 43a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 43e:	40 e0       	ldi	r20, 0x00	; 0
 440:	54 e0       	ldi	r21, 0x04	; 4
 442:	66 e0       	ldi	r22, 0x06	; 6
 444:	70 e0       	ldi	r23, 0x00	; 0
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 53 00 	call	0xa6	; 0xa6 <init_PWM1A>
	init_PWM1B(0);
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 fd 00 	call	0x1fa	; 0x1fa <init_PWM1B>
	uint8_t valor = 0;


	while (1) {
		if (PuertoADC==4)
 456:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 45a:	84 30       	cpi	r24, 0x04	; 4
 45c:	99 f4       	brne	.+38     	; 0x484 <main+0x6e>
		{
			valor = readADC(4);
 45e:	84 e0       	ldi	r24, 0x04	; 4
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 83 01 	call	0x306	; 0x306 <readADC>
			uint16_t valor_reescalado = reescalar(valor, 255, destino);
 466:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 46a:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_end+0x1>
 46e:	6f ef       	ldi	r22, 0xFF	; 255
 470:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <reescalar>
			duty_cycle1A(valor_reescalado);
 474:	0e 94 0e 01 	call	0x21c	; 0x21c <duty_cycle1A>
			PuertoADC++;
 478:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 47c:	8f 5f       	subi	r24, 0xFF	; 255
 47e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 482:	e9 cf       	rjmp	.-46     	; 0x456 <main+0x40>
		} else if (PuertoADC==5)
 484:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 488:	85 30       	cpi	r24, 0x05	; 5
 48a:	89 f4       	brne	.+34     	; 0x4ae <main+0x98>
		{
			valor =readADC(5);
 48c:	85 e0       	ldi	r24, 0x05	; 5
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 83 01 	call	0x306	; 0x306 <readADC>
			uint16_t valor_reescalado = reescalar(valor, 255, destino);
 494:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 498:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_end+0x1>
 49c:	6f ef       	ldi	r22, 0xFF	; 255
 49e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <reescalar>
			duty_cycle1B(valor_reescalado);
 4a2:	0e 94 13 01 	call	0x226	; 0x226 <duty_cycle1B>
			PuertoADC=4;
 4a6:	84 e0       	ldi	r24, 0x04	; 4
 4a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 4ac:	d4 cf       	rjmp	.-88     	; 0x456 <main+0x40>
			} else{
			PuertoADC=4;
 4ae:	84 e0       	ldi	r24, 0x04	; 4
 4b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 4b4:	d0 cf       	rjmp	.-96     	; 0x456 <main+0x40>

000004b6 <__divsf3>:
 4b6:	0e 94 6f 02 	call	0x4de	; 0x4de <__divsf3x>
 4ba:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_round>
 4be:	0e 94 49 03 	call	0x692	; 0x692 <__fp_pscB>
 4c2:	58 f0       	brcs	.+22     	; 0x4da <__divsf3+0x24>
 4c4:	0e 94 42 03 	call	0x684	; 0x684 <__fp_pscA>
 4c8:	40 f0       	brcs	.+16     	; 0x4da <__divsf3+0x24>
 4ca:	29 f4       	brne	.+10     	; 0x4d6 <__divsf3+0x20>
 4cc:	5f 3f       	cpi	r21, 0xFF	; 255
 4ce:	29 f0       	breq	.+10     	; 0x4da <__divsf3+0x24>
 4d0:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_inf>
 4d4:	51 11       	cpse	r21, r1
 4d6:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_szero>
 4da:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__fp_nan>

000004de <__divsf3x>:
 4de:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__fp_split3>
 4e2:	68 f3       	brcs	.-38     	; 0x4be <__divsf3+0x8>

000004e4 <__divsf3_pse>:
 4e4:	99 23       	and	r25, r25
 4e6:	b1 f3       	breq	.-20     	; 0x4d4 <__divsf3+0x1e>
 4e8:	55 23       	and	r21, r21
 4ea:	91 f3       	breq	.-28     	; 0x4d0 <__divsf3+0x1a>
 4ec:	95 1b       	sub	r25, r21
 4ee:	55 0b       	sbc	r21, r21
 4f0:	bb 27       	eor	r27, r27
 4f2:	aa 27       	eor	r26, r26
 4f4:	62 17       	cp	r22, r18
 4f6:	73 07       	cpc	r23, r19
 4f8:	84 07       	cpc	r24, r20
 4fa:	38 f0       	brcs	.+14     	; 0x50a <__divsf3_pse+0x26>
 4fc:	9f 5f       	subi	r25, 0xFF	; 255
 4fe:	5f 4f       	sbci	r21, 0xFF	; 255
 500:	22 0f       	add	r18, r18
 502:	33 1f       	adc	r19, r19
 504:	44 1f       	adc	r20, r20
 506:	aa 1f       	adc	r26, r26
 508:	a9 f3       	breq	.-22     	; 0x4f4 <__divsf3_pse+0x10>
 50a:	35 d0       	rcall	.+106    	; 0x576 <__divsf3_pse+0x92>
 50c:	0e 2e       	mov	r0, r30
 50e:	3a f0       	brmi	.+14     	; 0x51e <__divsf3_pse+0x3a>
 510:	e0 e8       	ldi	r30, 0x80	; 128
 512:	32 d0       	rcall	.+100    	; 0x578 <__divsf3_pse+0x94>
 514:	91 50       	subi	r25, 0x01	; 1
 516:	50 40       	sbci	r21, 0x00	; 0
 518:	e6 95       	lsr	r30
 51a:	00 1c       	adc	r0, r0
 51c:	ca f7       	brpl	.-14     	; 0x510 <__divsf3_pse+0x2c>
 51e:	2b d0       	rcall	.+86     	; 0x576 <__divsf3_pse+0x92>
 520:	fe 2f       	mov	r31, r30
 522:	29 d0       	rcall	.+82     	; 0x576 <__divsf3_pse+0x92>
 524:	66 0f       	add	r22, r22
 526:	77 1f       	adc	r23, r23
 528:	88 1f       	adc	r24, r24
 52a:	bb 1f       	adc	r27, r27
 52c:	26 17       	cp	r18, r22
 52e:	37 07       	cpc	r19, r23
 530:	48 07       	cpc	r20, r24
 532:	ab 07       	cpc	r26, r27
 534:	b0 e8       	ldi	r27, 0x80	; 128
 536:	09 f0       	breq	.+2      	; 0x53a <__divsf3_pse+0x56>
 538:	bb 0b       	sbc	r27, r27
 53a:	80 2d       	mov	r24, r0
 53c:	bf 01       	movw	r22, r30
 53e:	ff 27       	eor	r31, r31
 540:	93 58       	subi	r25, 0x83	; 131
 542:	5f 4f       	sbci	r21, 0xFF	; 255
 544:	3a f0       	brmi	.+14     	; 0x554 <__divsf3_pse+0x70>
 546:	9e 3f       	cpi	r25, 0xFE	; 254
 548:	51 05       	cpc	r21, r1
 54a:	78 f0       	brcs	.+30     	; 0x56a <__divsf3_pse+0x86>
 54c:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_inf>
 550:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_szero>
 554:	5f 3f       	cpi	r21, 0xFF	; 255
 556:	e4 f3       	brlt	.-8      	; 0x550 <__divsf3_pse+0x6c>
 558:	98 3e       	cpi	r25, 0xE8	; 232
 55a:	d4 f3       	brlt	.-12     	; 0x550 <__divsf3_pse+0x6c>
 55c:	86 95       	lsr	r24
 55e:	77 95       	ror	r23
 560:	67 95       	ror	r22
 562:	b7 95       	ror	r27
 564:	f7 95       	ror	r31
 566:	9f 5f       	subi	r25, 0xFF	; 255
 568:	c9 f7       	brne	.-14     	; 0x55c <__divsf3_pse+0x78>
 56a:	88 0f       	add	r24, r24
 56c:	91 1d       	adc	r25, r1
 56e:	96 95       	lsr	r25
 570:	87 95       	ror	r24
 572:	97 f9       	bld	r25, 7
 574:	08 95       	ret
 576:	e1 e0       	ldi	r30, 0x01	; 1
 578:	66 0f       	add	r22, r22
 57a:	77 1f       	adc	r23, r23
 57c:	88 1f       	adc	r24, r24
 57e:	bb 1f       	adc	r27, r27
 580:	62 17       	cp	r22, r18
 582:	73 07       	cpc	r23, r19
 584:	84 07       	cpc	r24, r20
 586:	ba 07       	cpc	r27, r26
 588:	20 f0       	brcs	.+8      	; 0x592 <__divsf3_pse+0xae>
 58a:	62 1b       	sub	r22, r18
 58c:	73 0b       	sbc	r23, r19
 58e:	84 0b       	sbc	r24, r20
 590:	ba 0b       	sbc	r27, r26
 592:	ee 1f       	adc	r30, r30
 594:	88 f7       	brcc	.-30     	; 0x578 <__divsf3_pse+0x94>
 596:	e0 95       	com	r30
 598:	08 95       	ret

0000059a <__fixunssfsi>:
 59a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_splitA>
 59e:	88 f0       	brcs	.+34     	; 0x5c2 <__fixunssfsi+0x28>
 5a0:	9f 57       	subi	r25, 0x7F	; 127
 5a2:	98 f0       	brcs	.+38     	; 0x5ca <__fixunssfsi+0x30>
 5a4:	b9 2f       	mov	r27, r25
 5a6:	99 27       	eor	r25, r25
 5a8:	b7 51       	subi	r27, 0x17	; 23
 5aa:	b0 f0       	brcs	.+44     	; 0x5d8 <__fixunssfsi+0x3e>
 5ac:	e1 f0       	breq	.+56     	; 0x5e6 <__fixunssfsi+0x4c>
 5ae:	66 0f       	add	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	88 1f       	adc	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	1a f0       	brmi	.+6      	; 0x5be <__fixunssfsi+0x24>
 5b8:	ba 95       	dec	r27
 5ba:	c9 f7       	brne	.-14     	; 0x5ae <__fixunssfsi+0x14>
 5bc:	14 c0       	rjmp	.+40     	; 0x5e6 <__fixunssfsi+0x4c>
 5be:	b1 30       	cpi	r27, 0x01	; 1
 5c0:	91 f0       	breq	.+36     	; 0x5e6 <__fixunssfsi+0x4c>
 5c2:	0e 94 83 03 	call	0x706	; 0x706 <__fp_zero>
 5c6:	b1 e0       	ldi	r27, 0x01	; 1
 5c8:	08 95       	ret
 5ca:	0c 94 83 03 	jmp	0x706	; 0x706 <__fp_zero>
 5ce:	67 2f       	mov	r22, r23
 5d0:	78 2f       	mov	r23, r24
 5d2:	88 27       	eor	r24, r24
 5d4:	b8 5f       	subi	r27, 0xF8	; 248
 5d6:	39 f0       	breq	.+14     	; 0x5e6 <__fixunssfsi+0x4c>
 5d8:	b9 3f       	cpi	r27, 0xF9	; 249
 5da:	cc f3       	brlt	.-14     	; 0x5ce <__fixunssfsi+0x34>
 5dc:	86 95       	lsr	r24
 5de:	77 95       	ror	r23
 5e0:	67 95       	ror	r22
 5e2:	b3 95       	inc	r27
 5e4:	d9 f7       	brne	.-10     	; 0x5dc <__fixunssfsi+0x42>
 5e6:	3e f4       	brtc	.+14     	; 0x5f6 <__fixunssfsi+0x5c>
 5e8:	90 95       	com	r25
 5ea:	80 95       	com	r24
 5ec:	70 95       	com	r23
 5ee:	61 95       	neg	r22
 5f0:	7f 4f       	sbci	r23, 0xFF	; 255
 5f2:	8f 4f       	sbci	r24, 0xFF	; 255
 5f4:	9f 4f       	sbci	r25, 0xFF	; 255
 5f6:	08 95       	ret

000005f8 <__floatunsisf>:
 5f8:	e8 94       	clt
 5fa:	09 c0       	rjmp	.+18     	; 0x60e <__floatsisf+0x12>

000005fc <__floatsisf>:
 5fc:	97 fb       	bst	r25, 7
 5fe:	3e f4       	brtc	.+14     	; 0x60e <__floatsisf+0x12>
 600:	90 95       	com	r25
 602:	80 95       	com	r24
 604:	70 95       	com	r23
 606:	61 95       	neg	r22
 608:	7f 4f       	sbci	r23, 0xFF	; 255
 60a:	8f 4f       	sbci	r24, 0xFF	; 255
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	99 23       	and	r25, r25
 610:	a9 f0       	breq	.+42     	; 0x63c <__floatsisf+0x40>
 612:	f9 2f       	mov	r31, r25
 614:	96 e9       	ldi	r25, 0x96	; 150
 616:	bb 27       	eor	r27, r27
 618:	93 95       	inc	r25
 61a:	f6 95       	lsr	r31
 61c:	87 95       	ror	r24
 61e:	77 95       	ror	r23
 620:	67 95       	ror	r22
 622:	b7 95       	ror	r27
 624:	f1 11       	cpse	r31, r1
 626:	f8 cf       	rjmp	.-16     	; 0x618 <__floatsisf+0x1c>
 628:	fa f4       	brpl	.+62     	; 0x668 <__floatsisf+0x6c>
 62a:	bb 0f       	add	r27, r27
 62c:	11 f4       	brne	.+4      	; 0x632 <__floatsisf+0x36>
 62e:	60 ff       	sbrs	r22, 0
 630:	1b c0       	rjmp	.+54     	; 0x668 <__floatsisf+0x6c>
 632:	6f 5f       	subi	r22, 0xFF	; 255
 634:	7f 4f       	sbci	r23, 0xFF	; 255
 636:	8f 4f       	sbci	r24, 0xFF	; 255
 638:	9f 4f       	sbci	r25, 0xFF	; 255
 63a:	16 c0       	rjmp	.+44     	; 0x668 <__floatsisf+0x6c>
 63c:	88 23       	and	r24, r24
 63e:	11 f0       	breq	.+4      	; 0x644 <__floatsisf+0x48>
 640:	96 e9       	ldi	r25, 0x96	; 150
 642:	11 c0       	rjmp	.+34     	; 0x666 <__floatsisf+0x6a>
 644:	77 23       	and	r23, r23
 646:	21 f0       	breq	.+8      	; 0x650 <__floatsisf+0x54>
 648:	9e e8       	ldi	r25, 0x8E	; 142
 64a:	87 2f       	mov	r24, r23
 64c:	76 2f       	mov	r23, r22
 64e:	05 c0       	rjmp	.+10     	; 0x65a <__floatsisf+0x5e>
 650:	66 23       	and	r22, r22
 652:	71 f0       	breq	.+28     	; 0x670 <__floatsisf+0x74>
 654:	96 e8       	ldi	r25, 0x86	; 134
 656:	86 2f       	mov	r24, r22
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	2a f0       	brmi	.+10     	; 0x668 <__floatsisf+0x6c>
 65e:	9a 95       	dec	r25
 660:	66 0f       	add	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	88 1f       	adc	r24, r24
 666:	da f7       	brpl	.-10     	; 0x65e <__floatsisf+0x62>
 668:	88 0f       	add	r24, r24
 66a:	96 95       	lsr	r25
 66c:	87 95       	ror	r24
 66e:	97 f9       	bld	r25, 7
 670:	08 95       	ret

00000672 <__fp_inf>:
 672:	97 f9       	bld	r25, 7
 674:	9f 67       	ori	r25, 0x7F	; 127
 676:	80 e8       	ldi	r24, 0x80	; 128
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	60 e0       	ldi	r22, 0x00	; 0
 67c:	08 95       	ret

0000067e <__fp_nan>:
 67e:	9f ef       	ldi	r25, 0xFF	; 255
 680:	80 ec       	ldi	r24, 0xC0	; 192
 682:	08 95       	ret

00000684 <__fp_pscA>:
 684:	00 24       	eor	r0, r0
 686:	0a 94       	dec	r0
 688:	16 16       	cp	r1, r22
 68a:	17 06       	cpc	r1, r23
 68c:	18 06       	cpc	r1, r24
 68e:	09 06       	cpc	r0, r25
 690:	08 95       	ret

00000692 <__fp_pscB>:
 692:	00 24       	eor	r0, r0
 694:	0a 94       	dec	r0
 696:	12 16       	cp	r1, r18
 698:	13 06       	cpc	r1, r19
 69a:	14 06       	cpc	r1, r20
 69c:	05 06       	cpc	r0, r21
 69e:	08 95       	ret

000006a0 <__fp_round>:
 6a0:	09 2e       	mov	r0, r25
 6a2:	03 94       	inc	r0
 6a4:	00 0c       	add	r0, r0
 6a6:	11 f4       	brne	.+4      	; 0x6ac <__fp_round+0xc>
 6a8:	88 23       	and	r24, r24
 6aa:	52 f0       	brmi	.+20     	; 0x6c0 <__fp_round+0x20>
 6ac:	bb 0f       	add	r27, r27
 6ae:	40 f4       	brcc	.+16     	; 0x6c0 <__fp_round+0x20>
 6b0:	bf 2b       	or	r27, r31
 6b2:	11 f4       	brne	.+4      	; 0x6b8 <__fp_round+0x18>
 6b4:	60 ff       	sbrs	r22, 0
 6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <__fp_round+0x20>
 6b8:	6f 5f       	subi	r22, 0xFF	; 255
 6ba:	7f 4f       	sbci	r23, 0xFF	; 255
 6bc:	8f 4f       	sbci	r24, 0xFF	; 255
 6be:	9f 4f       	sbci	r25, 0xFF	; 255
 6c0:	08 95       	ret

000006c2 <__fp_split3>:
 6c2:	57 fd       	sbrc	r21, 7
 6c4:	90 58       	subi	r25, 0x80	; 128
 6c6:	44 0f       	add	r20, r20
 6c8:	55 1f       	adc	r21, r21
 6ca:	59 f0       	breq	.+22     	; 0x6e2 <__fp_splitA+0x10>
 6cc:	5f 3f       	cpi	r21, 0xFF	; 255
 6ce:	71 f0       	breq	.+28     	; 0x6ec <__fp_splitA+0x1a>
 6d0:	47 95       	ror	r20

000006d2 <__fp_splitA>:
 6d2:	88 0f       	add	r24, r24
 6d4:	97 fb       	bst	r25, 7
 6d6:	99 1f       	adc	r25, r25
 6d8:	61 f0       	breq	.+24     	; 0x6f2 <__fp_splitA+0x20>
 6da:	9f 3f       	cpi	r25, 0xFF	; 255
 6dc:	79 f0       	breq	.+30     	; 0x6fc <__fp_splitA+0x2a>
 6de:	87 95       	ror	r24
 6e0:	08 95       	ret
 6e2:	12 16       	cp	r1, r18
 6e4:	13 06       	cpc	r1, r19
 6e6:	14 06       	cpc	r1, r20
 6e8:	55 1f       	adc	r21, r21
 6ea:	f2 cf       	rjmp	.-28     	; 0x6d0 <__fp_split3+0xe>
 6ec:	46 95       	lsr	r20
 6ee:	f1 df       	rcall	.-30     	; 0x6d2 <__fp_splitA>
 6f0:	08 c0       	rjmp	.+16     	; 0x702 <__fp_splitA+0x30>
 6f2:	16 16       	cp	r1, r22
 6f4:	17 06       	cpc	r1, r23
 6f6:	18 06       	cpc	r1, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	f1 cf       	rjmp	.-30     	; 0x6de <__fp_splitA+0xc>
 6fc:	86 95       	lsr	r24
 6fe:	71 05       	cpc	r23, r1
 700:	61 05       	cpc	r22, r1
 702:	08 94       	sec
 704:	08 95       	ret

00000706 <__fp_zero>:
 706:	e8 94       	clt

00000708 <__fp_szero>:
 708:	bb 27       	eor	r27, r27
 70a:	66 27       	eor	r22, r22
 70c:	77 27       	eor	r23, r23
 70e:	cb 01       	movw	r24, r22
 710:	97 f9       	bld	r25, 7
 712:	08 95       	ret

00000714 <__mulsf3>:
 714:	0e 94 9d 03 	call	0x73a	; 0x73a <__mulsf3x>
 718:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_round>
 71c:	0e 94 42 03 	call	0x684	; 0x684 <__fp_pscA>
 720:	38 f0       	brcs	.+14     	; 0x730 <__mulsf3+0x1c>
 722:	0e 94 49 03 	call	0x692	; 0x692 <__fp_pscB>
 726:	20 f0       	brcs	.+8      	; 0x730 <__mulsf3+0x1c>
 728:	95 23       	and	r25, r21
 72a:	11 f0       	breq	.+4      	; 0x730 <__mulsf3+0x1c>
 72c:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_inf>
 730:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__fp_nan>
 734:	11 24       	eor	r1, r1
 736:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_szero>

0000073a <__mulsf3x>:
 73a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__fp_split3>
 73e:	70 f3       	brcs	.-36     	; 0x71c <__mulsf3+0x8>

00000740 <__mulsf3_pse>:
 740:	95 9f       	mul	r25, r21
 742:	c1 f3       	breq	.-16     	; 0x734 <__mulsf3+0x20>
 744:	95 0f       	add	r25, r21
 746:	50 e0       	ldi	r21, 0x00	; 0
 748:	55 1f       	adc	r21, r21
 74a:	62 9f       	mul	r22, r18
 74c:	f0 01       	movw	r30, r0
 74e:	72 9f       	mul	r23, r18
 750:	bb 27       	eor	r27, r27
 752:	f0 0d       	add	r31, r0
 754:	b1 1d       	adc	r27, r1
 756:	63 9f       	mul	r22, r19
 758:	aa 27       	eor	r26, r26
 75a:	f0 0d       	add	r31, r0
 75c:	b1 1d       	adc	r27, r1
 75e:	aa 1f       	adc	r26, r26
 760:	64 9f       	mul	r22, r20
 762:	66 27       	eor	r22, r22
 764:	b0 0d       	add	r27, r0
 766:	a1 1d       	adc	r26, r1
 768:	66 1f       	adc	r22, r22
 76a:	82 9f       	mul	r24, r18
 76c:	22 27       	eor	r18, r18
 76e:	b0 0d       	add	r27, r0
 770:	a1 1d       	adc	r26, r1
 772:	62 1f       	adc	r22, r18
 774:	73 9f       	mul	r23, r19
 776:	b0 0d       	add	r27, r0
 778:	a1 1d       	adc	r26, r1
 77a:	62 1f       	adc	r22, r18
 77c:	83 9f       	mul	r24, r19
 77e:	a0 0d       	add	r26, r0
 780:	61 1d       	adc	r22, r1
 782:	22 1f       	adc	r18, r18
 784:	74 9f       	mul	r23, r20
 786:	33 27       	eor	r19, r19
 788:	a0 0d       	add	r26, r0
 78a:	61 1d       	adc	r22, r1
 78c:	23 1f       	adc	r18, r19
 78e:	84 9f       	mul	r24, r20
 790:	60 0d       	add	r22, r0
 792:	21 1d       	adc	r18, r1
 794:	82 2f       	mov	r24, r18
 796:	76 2f       	mov	r23, r22
 798:	6a 2f       	mov	r22, r26
 79a:	11 24       	eor	r1, r1
 79c:	9f 57       	subi	r25, 0x7F	; 127
 79e:	50 40       	sbci	r21, 0x00	; 0
 7a0:	9a f0       	brmi	.+38     	; 0x7c8 <__mulsf3_pse+0x88>
 7a2:	f1 f0       	breq	.+60     	; 0x7e0 <__mulsf3_pse+0xa0>
 7a4:	88 23       	and	r24, r24
 7a6:	4a f0       	brmi	.+18     	; 0x7ba <__mulsf3_pse+0x7a>
 7a8:	ee 0f       	add	r30, r30
 7aa:	ff 1f       	adc	r31, r31
 7ac:	bb 1f       	adc	r27, r27
 7ae:	66 1f       	adc	r22, r22
 7b0:	77 1f       	adc	r23, r23
 7b2:	88 1f       	adc	r24, r24
 7b4:	91 50       	subi	r25, 0x01	; 1
 7b6:	50 40       	sbci	r21, 0x00	; 0
 7b8:	a9 f7       	brne	.-22     	; 0x7a4 <__mulsf3_pse+0x64>
 7ba:	9e 3f       	cpi	r25, 0xFE	; 254
 7bc:	51 05       	cpc	r21, r1
 7be:	80 f0       	brcs	.+32     	; 0x7e0 <__mulsf3_pse+0xa0>
 7c0:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_inf>
 7c4:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_szero>
 7c8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ca:	e4 f3       	brlt	.-8      	; 0x7c4 <__mulsf3_pse+0x84>
 7cc:	98 3e       	cpi	r25, 0xE8	; 232
 7ce:	d4 f3       	brlt	.-12     	; 0x7c4 <__mulsf3_pse+0x84>
 7d0:	86 95       	lsr	r24
 7d2:	77 95       	ror	r23
 7d4:	67 95       	ror	r22
 7d6:	b7 95       	ror	r27
 7d8:	f7 95       	ror	r31
 7da:	e7 95       	ror	r30
 7dc:	9f 5f       	subi	r25, 0xFF	; 255
 7de:	c1 f7       	brne	.-16     	; 0x7d0 <__mulsf3_pse+0x90>
 7e0:	fe 2b       	or	r31, r30
 7e2:	88 0f       	add	r24, r24
 7e4:	91 1d       	adc	r25, r1
 7e6:	96 95       	lsr	r25
 7e8:	87 95       	ror	r24
 7ea:	97 f9       	bld	r25, 7
 7ec:	08 95       	ret

000007ee <_exit>:
 7ee:	f8 94       	cli

000007f0 <__stop_program>:
 7f0:	ff cf       	rjmp	.-2      	; 0x7f0 <__stop_program>
